import { supabase } from './lib/supabase.js';

async function createUserCanAccessTrailFunction() {
  try {
    console.log('üîß Criando fun√ß√£o user_can_access_trail...');
    
    // Como n√£o podemos executar SQL diretamente, vamos implementar a l√≥gica no JavaScript
    // e atualizar o hook useTrails para usar essa l√≥gica
    
    console.log('üí° A fun√ß√£o user_can_access_trail ser√° implementada no JavaScript');
    console.log('üìù Atualizando o hook useTrails para usar l√≥gica baseada no t√≠tulo...');
    
    // Definir as regras de acesso baseadas no t√≠tulo da trilha
    const accessRules = {
      funcionario: [
        'Atendimento ao Cliente - Funcion√°rio',
        'Procedimentos Operacionais - Funcion√°rio', 
        'Atendimento',
        'Produtos Pet',
        'Relacionamento',
        'Vendas',
        'Estoque',
        'Seguran√ßa e Compliance',
        'Cultura Organizacional'
      ],
      gerente: [
        'Lideran√ßa e Gest√£o - Gerente',
        'Gest√£o Financeira - Gerente',
        'Lideran√ßa',
        'Gest√£o de Loja',
        'Vendas',
        'Estoque', 
        'Seguran√ßa e Compliance',
        'Cultura Organizacional'
      ],
      caixa: [
        'Opera√ß√µes de Caixa - Caixa',
        'Atendimento R√°pido - Caixa',
        'PDV',
        'Fechamento',
        'Vendas',
        'Estoque',
        'Seguran√ßa e Compliance', 
        'Cultura Organizacional'
      ],
      admin: [
        // Admin pode acessar todas as trilhas
        'Atendimento ao Cliente - Funcion√°rio',
        'Procedimentos Operacionais - Funcion√°rio',
        'Lideran√ßa e Gest√£o - Gerente', 
        'Gest√£o Financeira - Gerente',
        'Opera√ß√µes de Caixa - Caixa',
        'Atendimento R√°pido - Caixa',
        'Atendimento',
        'Vendas',
        'Produtos Pet',
        'Lideran√ßa',
        'Gest√£o de Loja',
        'Estoque',
        'PDV',
        'Fechamento',
        'Relacionamento',
        'Seguran√ßa e Compliance',
        'Cultura Organizacional'
      ]
    };
    
    console.log('üìã Regras de acesso definidas:');
    Object.entries(accessRules).forEach(([role, trails]) => {
      console.log(`  ${role}: ${trails.length} trilhas`);
    });
    
    // Testar a l√≥gica
    console.log('\\nüß™ Testando l√≥gica de acesso...');
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('role')
      .limit(1)
      .single();
    
    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError.message);
      return;
    }
    
    const userRole = user.role;
    const allowedTrails = accessRules[userRole] || [];
    
    console.log(`üë§ Usu√°rio com role "${userRole}" pode acessar ${allowedTrails.length} trilhas:`);
    allowedTrails.forEach(trail => {
      console.log(`  - ${trail}`);
    });
    
    return accessRules;
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

createUserCanAccessTrailFunction();