import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase (usando as mesmas do lib/supabase.js)
const SUPABASE_URL = 'https://wnpkmkqtqjqjqjqjqjqj.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InducGtta3F0cWpxampxampxampxaiIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzM0NTU5NzI0LCJleHAiOjIwNTAxMzU3MjR9.example';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function debugUserRole() {
  try {
    console.log('üîç Verificando role do usu√°rio...');
    
    // 1. Verificar usu√°rio atual
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', authError.message);
      return;
    }
    
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o est√° logado');
      return;
    }
    
    console.log('‚úÖ Usu√°rio logado:', user.email);
    
    // 2. Verificar dados do usu√°rio na tabela users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, email, role, created_at')
      .eq('id', user.id)
      .single();
    
    if (userError) {
      console.error('‚ùå Erro ao buscar dados do usu√°rio:', userError.message);
      return;
    }
    
    console.log('üë§ Dados do usu√°rio:', userData);
    
    // 3. Verificar uma trilha espec√≠fica
    const { data: trailData, error: trailError } = await supabase
      .from('trails')
      .select('id, title, target_roles')
      .eq('title', 'Atendimento ao Cliente para Funcion√°rios')
      .single();
    
    if (trailError) {
      console.error('‚ùå Erro ao buscar trilha:', trailError.message);
      return;
    }
    
    console.log('üõ§Ô∏è Trilha encontrada:', trailData);
    
    // 4. Testar fun√ß√£o user_can_access_trail
    const { data: canAccess, error: accessError } = await supabase
      .rpc('user_can_access_trail', {
        p_user_id: user.id,
        p_trail_id: trailData.id
      });
    
    if (accessError) {
      console.error('‚ùå Erro na fun√ß√£o user_can_access_trail:', accessError.message);
      return;
    }
    
    console.log('üîê Pode acessar trilha:', canAccess);
    
    // 5. Verificar manualmente se o role est√° na lista
    const userRole = userData.role;
    const trailRoles = trailData.target_roles;
    const shouldHaveAccess = trailRoles && trailRoles.includes(userRole);
    
    console.log('üîç Verifica√ß√£o manual:');
    console.log('  - Role do usu√°rio:', userRole);
    console.log('  - Roles da trilha:', trailRoles);
    console.log('  - Deveria ter acesso:', shouldHaveAccess);
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

debugUserRole();